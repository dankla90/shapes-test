import { Fetcher, IndexedFormula, UpdateManager } from "rdflib";
import { CreateArgs } from "./handlers/create";
import { FindAllArgs } from "./handlers/findAll";
import { FindUniqueArgs } from "./handlers/findOne";
import { UpdateArgs } from "./handlers/update";
import { DeleteArgs } from "./handlers/delete";
export interface QueryResult<Type> {
    errors?: string[];
    data?: Type;
    from: string | string[];
}
export interface ShapeConstructorArgs {
    id: string;
    shape: string;
    context: Record<string, string>;
    childContexts?: Record<string, string>[];
    type?: Record<string, string> | string[];
}
export declare class Shape<ShapeType, CreateShapeArgs> {
    id: string;
    shape: string;
    schema: any;
    prefixes: any;
    type?: string[];
    context: Record<string, string>;
    childContexts: Record<string, string>[];
    store: IndexedFormula;
    fetcher: Fetcher;
    updater: UpdateManager;
    constructor({ id, shape, context, childContexts, type, }: ShapeConstructorArgs);
    dataToStatements(this: Shape<ShapeType, CreateShapeArgs>, data: Partial<CreateShapeArgs>, doc: string): [import("rdflib").Statement<import("rdflib/lib/types").SubjectType, import("rdflib/lib/types").PredicateType, import("rdflib/lib/types").ObjectType, import("rdflib/lib/types").GraphType>[], import("rdflib").Statement<import("rdflib/lib/types").SubjectType, import("rdflib/lib/types").PredicateType, import("rdflib/lib/types").ObjectType, import("rdflib/lib/types").GraphType>[]];
    findOne(this: Shape<ShapeType, CreateShapeArgs>, args: FindUniqueArgs): Promise<QueryResult<ShapeType>>;
    create(this: Shape<ShapeType, CreateShapeArgs>, args: CreateArgs<CreateShapeArgs>): Promise<QueryResult<ShapeType>>;
    update(this: Shape<ShapeType, CreateShapeArgs>, args: UpdateArgs<CreateShapeArgs>): Promise<QueryResult<ShapeType>>;
    delete(this: Shape<ShapeType, CreateShapeArgs>, args: DeleteArgs): Promise<void>;
    findAll(this: Shape<ShapeType, CreateShapeArgs>, args: FindAllArgs<ShapeType>): Promise<QueryResult<ShapeType[]>>;
}
//# sourceMappingURL=shape.d.ts.map