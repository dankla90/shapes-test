"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAllStatementsOfNode = exports.validateShex = exports.validateShapes = void 0;
var rdflib_1 = require("rdflib");
var n3_1 = require("n3");
var rdfToData_1 = require("./transform/rdfToData");
var shex = require("shex");
function validateShapes(shape, ids) {
    var schema = shape.schema, context = shape.context, prefixes = shape.prefixes, childContexts = shape.childContexts, type = shape.type, store = shape.store, shapeId = shape.id;
    return validateShex({
        schema: schema,
        prefixes: prefixes,
        type: type,
        store: store,
        shapeId: shapeId,
        contexts: __spreadArray([context], childContexts),
        ids: ids,
    });
}
exports.validateShapes = validateShapes;
function validateShex(_a) {
    var schema = _a.schema, store = _a.store, type = _a.type, ids = _a.ids, shapeId = _a.shapeId, contexts = _a.contexts, prefixes = _a.prefixes;
    return __awaiter(this, void 0, void 0, function () {
        var validator, _b, db, potentialShapes, allErrors, allShapes, validated;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    validator = shex.Validator.construct(schema, {
                        results: "api",
                    });
                    return [4 /*yield*/, createN3DB(store, type)];
                case 1:
                    _b = _c.sent(), db = _b[0], potentialShapes = _b[1];
                    allErrors = undefined;
                    allShapes = undefined;
                    if (!ids && potentialShapes.length === 0) {
                        return [2 /*return*/, [undefined, ["No shapes found of type " + shapeId]]];
                    }
                    try {
                        validated = validator.validate(db, (ids !== null && ids !== void 0 ? ids : potentialShapes).map(function (id) { return ({ node: id, shape: shapeId }); }));
                        validated.forEach(function (validation) {
                            var _a = mapValidationResult(shapeId, validation), foundShape = _a[0], foundErrors = _a[1];
                            if (!foundErrors)
                                allShapes = __spreadArray(__spreadArray([], (allShapes !== null && allShapes !== void 0 ? allShapes : [])), [
                                    rdfToData_1.validatedToDataResult(__assign({ contexts: contexts,
                                        prefixes: prefixes }, foundShape)),
                                ]);
                            if (foundErrors) {
                                allErrors = __spreadArray(__spreadArray([], (allErrors !== null && allErrors !== void 0 ? allErrors : [])), foundErrors);
                            }
                        });
                        return [2 /*return*/, [allShapes, allErrors]];
                    }
                    catch (err) {
                        console.debug(err);
                        return [2 /*return*/, [undefined, [err.message]]];
                    }
                    return [2 /*return*/];
            }
        });
    });
}
exports.validateShex = validateShex;
function mapValidationResult(shapeId, validated) {
    var foundErrors;
    var foundShapes;
    foundErrors =
        validated.status === "nonconformant" &&
            shex.Util.errsToSimple(validated.appinfo, validated.node, shapeId);
    foundShapes =
        validated.status === "conformant" &&
            {
                validated: shex.Util.valToValues(validated.appinfo),
                baseUrl: validated.node,
                shapeUrl: validated.shape,
            };
    return [foundShapes, foundErrors];
}
function getNodesFromStore(store, type) {
    return (type
        ? type.reduce(function (allNodes, type) {
            return __spreadArray(__spreadArray([], allNodes), store.each(null, new rdflib_1.NamedNode("http://www.w3.org/1999/02/22-rdf-syntax-ns#type"), new rdflib_1.NamedNode(type)));
        }, [])
        : store.each(null)).filter(function (node, index, allNodes) {
        return (allNodes.findIndex(function (possiblySameNode) { return possiblySameNode.value === node.value; }) === index);
    });
}
function getAllStatementsOfNode(store, node) {
    return __spreadArray(__spreadArray([], store
        .statementsMatching(node)
        .reduce(function (allStatements, statement) {
        if (statement.object.termType === "BlankNode" ||
            statement.object.termType === "NamedNode") {
            var allObjectStatements = getAllStatementsOfNode(store, statement.object);
            return __spreadArray(__spreadArray(__spreadArray([], allStatements), [statement]), allObjectStatements);
        }
        else {
            return __spreadArray(__spreadArray([], allStatements), [statement]);
        }
    }, [])), store.statementsMatching(null, null, node));
}
exports.getAllStatementsOfNode = getAllStatementsOfNode;
function createN3DB(store, types) {
    var foundNodes = getNodesFromStore(store, types);
    var turtle = new rdflib_1.Serializer(store).statementsToN3(store.statements);
    var n3Store = new n3_1.Store();
    return new Promise(function (resolve, reject) {
        new n3_1.Parser({
            baseIRI: null,
            blankNodePrefix: "",
            format: "text/turtle",
        }).parse(turtle, function (error, triple) {
            if (error) {
                reject(error);
            }
            else if (triple) {
                n3Store.addTriple(triple);
            }
            else {
                resolve([
                    shex.Util.makeN3DB(n3Store),
                    foundNodes.map(function (node) { return node.value; }),
                ]);
            }
        });
    });
}
//# sourceMappingURL=validate.js.map