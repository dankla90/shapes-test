"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.normalizeUrl = exports.getNameOfPath = exports.getNormalizedKeyFromContextOrSchemaPrefixes = exports.absoluteToNormalizedValue = exports.absoluteToNormalized = exports.validatedToAbsoluteValue = exports.validatedToAbsolute = exports.validatedToDataResult = void 0;
var camelcase_1 = __importDefault(require("camelcase"));
function validatedToDataResult(_a) {
    var validated = _a.validated, baseUrl = _a.baseUrl, shapeUrl = _a.shapeUrl, contexts = _a.contexts, prefixes = _a.prefixes;
    var absoluteData = validatedToAbsolute(validated, baseUrl);
    var data = absoluteToNormalized(absoluteData, contexts, prefixes);
    return proxifyShape(__assign({ __shapeName: shapeUrl, id: validated.node }, data), contexts, prefixes);
}
exports.validatedToDataResult = validatedToDataResult;
function validatedToAbsolute(data, baseUrl) {
    return Object.assign.apply(Object, __spreadArray([{ id: baseUrl }], Object.keys(data).map(function (key) {
        var _a, _b, _c;
        var value = data[key];
        if (Array.isArray(value)) {
            if (value.length === 1) {
                return _a = {}, _a[key] = validatedToAbsoluteValue(value[0]), _a;
            }
            return _b = {}, _b[key] = value.map(function (value) { return validatedToAbsoluteValue(value); }), _b;
        }
        else {
            return _c = {}, _c[key] = validatedToAbsoluteValue(value), _c;
        }
    })));
}
exports.validatedToAbsolute = validatedToAbsolute;
function validatedToAbsoluteValue(value) {
    if (value.nested) {
        return validatedToAbsolute(value.nested, value.ldterm);
    }
    else if (value.ldterm.value) {
        return value.ldterm.value;
    }
    else {
        return value.ldterm;
    }
}
exports.validatedToAbsoluteValue = validatedToAbsoluteValue;
function absoluteToNormalized(data, contexts, prefixes) {
    return Object.assign.apply(Object, __spreadArray([{}], Object.keys(data).map(function (key) {
        var _a, _b, _c, _d;
        if (key === "id") {
            return _a = {}, _a[key] = data[key], _a;
        }
        var contextKey = getNormalizedKeyFromContextOrSchemaPrefixes(key, contexts, prefixes);
        if (contextKey) {
            var value = data[key];
            if (Array.isArray(value)) {
                return _b = {},
                    _b[contextKey] = value.map(function (value) {
                        return absoluteToNormalizedValue(value, contexts, prefixes);
                    }),
                    _b;
            }
            else if (typeof value === "object") {
                return _c = {},
                    _c[contextKey] = absoluteToNormalized(value, contexts, prefixes),
                    _c;
            }
            else {
                return _d = {},
                    _d[contextKey] = absoluteToNormalizedValue(value, contexts, prefixes),
                    _d;
            }
        }
        else {
            throw Error("Could not find field name for: " + key + "\nContext objects used: \n" + JSON.stringify(contexts));
        }
    })));
}
exports.absoluteToNormalized = absoluteToNormalized;
function absoluteToNormalizedValue(value, contexts, prefixes) {
    if (typeof value === "object") {
        return absoluteToNormalized(value, contexts, prefixes);
    }
    else {
        return value;
    }
}
exports.absoluteToNormalizedValue = absoluteToNormalizedValue;
function getNormalizedKeyFromContextOrSchemaPrefixes(key, contexts, prefixes) {
    var prefix = Object.keys(prefixes).find(function (prefix) {
        return key.includes(prefixes[prefix]);
    });
    var prefixedKey = prefix + ":" + normalizeUrl(key);
    return contexts.reduce(function (key, context) {
        if (!key)
            return Object.keys(context).find(function (key) { return context[key] === prefixedKey; });
        else
            return key;
    }, "");
}
exports.getNormalizedKeyFromContextOrSchemaPrefixes = getNormalizedKeyFromContextOrSchemaPrefixes;
function getNameOfPath(path) {
    return path.substr(path.lastIndexOf("/") + 1).split(".")[0];
}
exports.getNameOfPath = getNameOfPath;
function normalizeUrl(url, capitalize, not, prefixes) {
    var urlObject = new URL(url);
    var normalized = camelcase_1.default(urlObject.hash === ""
        ? getNameOfPath(urlObject.pathname)
        : urlObject.hash.replace(/#+/, ""));
    if (not && normalized.toLowerCase() === not.toLowerCase()) {
        var namespaceUrl_1 = url.replace(urlObject.hash === ""
            ? getNameOfPath(urlObject.pathname)
            : urlObject.hash, "");
        var namespacePrefix = Object.keys(prefixes).find(function (key) { return prefixes[key] === namespaceUrl_1; });
        normalized =
            namespacePrefix + normalized.replace(/^\w/, function (c) { return c.toUpperCase(); });
    }
    if (capitalize) {
        return normalized.replace(/^\w/, function (c) { return c.toUpperCase(); });
    }
    return normalized;
}
exports.normalizeUrl = normalizeUrl;
function proxifyShape(shape, contexts, prefixes) {
    return new Proxy(shape, {
        get: function (target, key) {
            var directValue = proxyGetHandler(target, key, contexts, prefixes);
            if (directValue)
                return directValue;
            var _a = key.split(":"), prefix = _a[0], normalizedKey = _a[1];
            if (!normalizedKey || !prefix)
                return undefined;
            if (contexts.find(function (context) { return context[normalizedKey]; })) {
                return proxyGetHandler(target, normalizedKey, contexts, prefixes);
            }
            else {
                var absoluteKey = prefixes[prefix] + normalizedKey;
                var foundKey = getNormalizedKeyFromContextOrSchemaPrefixes(absoluteKey, contexts, prefixes);
                if (foundKey)
                    return proxyGetHandler(target, foundKey, contexts, prefixes);
            }
        },
    });
}
function proxyGetHandler(target, key, contexts, prefixes) {
    if (typeof target[key] === "string") {
        return target[key];
    }
    else if (typeof target[key] === "object") {
        return proxifyShape(target[key], contexts, prefixes);
    }
}
//# sourceMappingURL=rdfToData.js.map