export interface Validated {
    validated: any;
    baseUrl: string;
    shapeUrl: string;
}
export declare function validatedToDataResult({ validated, baseUrl, shapeUrl, contexts, prefixes, }: {
    contexts: Record<string, string>[];
    prefixes: Record<string, string>;
} & Validated): Record<string, any>;
export declare function validatedToAbsolute(data: any, baseUrl: string): any;
export declare function validatedToAbsoluteValue(value: any): any;
export declare function absoluteToNormalized(data: any, contexts: Record<string, string>[], prefixes: Record<string, string>): Record<string, any>;
export declare function absoluteToNormalizedValue(value: any, contexts: Record<string, string>[], prefixes: Record<string, string>): any;
export declare function getNormalizedKeyFromContextOrSchemaPrefixes(key: string, contexts: Record<string, string>[], prefixes: Record<string, string>): string | undefined;
export declare function getNameOfPath(path: string): string;
export declare function normalizeUrl(url: string, capitalize?: boolean, not?: string, prefixes?: any): string;
//# sourceMappingURL=rdfToData.d.ts.map