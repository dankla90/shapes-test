"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateExisting = exports.validateNewShape = exports.create = void 0;
var rdflib_1 = require("rdflib");
var validate_1 = require("../validate");
function create(shape, _a) {
    var doc = _a.doc, data = _a.data;
    return __awaiter(this, void 0, void 0, function () {
        var _this = this;
        return __generator(this, function (_b) {
            return [2 /*return*/, new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                    var doesntExist, id, _a, _del, ins, _b, newShape, errors;
                    return __generator(this, function (_c) {
                        switch (_c.label) {
                            case 0:
                                doesntExist = "";
                                return [4 /*yield*/, shape.fetcher
                                        .load(doc, { clearPreviousData: true })
                                        .catch(function (err) { return err.status === 404 && (doesntExist = err); })];
                            case 1:
                                _c.sent();
                                id = data.id;
                                if (shape.store.any(new rdflib_1.NamedNode(id), null, null, new rdflib_1.NamedNode(doc))) {
                                    resolve({
                                        from: doc,
                                        errors: ["Node with id: " + id + " already exists in doc:" + doc],
                                    });
                                }
                                return [4 /*yield*/, shape.dataToStatements(data, doc)];
                            case 2:
                                _a = _c.sent(), _del = _a[0], ins = _a[1];
                                return [4 /*yield*/, validateNewShape(shape, id, [], ins)];
                            case 3:
                                _b = _c.sent(), newShape = _b[0], errors = _b[1];
                                if (!(!newShape || errors)) return [3 /*break*/, 4];
                                resolve({ from: doc, errors: errors });
                                return [3 /*break*/, 8];
                            case 4:
                                if (!!doesntExist) return [3 /*break*/, 6];
                                return [4 /*yield*/, updateExisting(shape.updater, [], ins)
                                        .catch(function (err) { return resolve({ from: doc, errors: [err] }); })
                                        .then(function () { return resolve({ from: doc, data: newShape[0], errors: errors }); })];
                            case 5:
                                _c.sent();
                                return [3 /*break*/, 8];
                            case 6: return [4 /*yield*/, createNew(shape.updater, doc, ins)
                                    .catch(function (err) { return resolve({ from: doc, errors: [err] }); })
                                    .then(function () { return resolve({ from: doc, data: newShape[0], errors: errors }); })];
                            case 7:
                                _c.sent();
                                _c.label = 8;
                            case 8: return [2 /*return*/];
                        }
                    });
                }); })];
        });
    });
}
exports.create = create;
function validateNewShape(shape, node, del, ins) {
    var updatedStore = new rdflib_1.IndexedFormula();
    updatedStore.add(validate_1.getAllStatementsOfNode(shape.store, new rdflib_1.NamedNode(node)));
    updatedStore.remove(del);
    updatedStore.add(ins);
    var schema = shape.schema, context = shape.context, prefixes = shape.prefixes, childContexts = shape.childContexts, type = shape.type, shapeId = shape.id;
    return validate_1.validateShex({
        schema: schema,
        type: type,
        shapeId: shapeId,
        prefixes: prefixes,
        store: updatedStore,
        contexts: __spreadArray([context], childContexts),
    });
}
exports.validateNewShape = validateNewShape;
function updateExisting(updater, del, ins) {
    var _this = this;
    return new Promise(function (resolve, reject) {
        updater.update(del, ins, function (_uri, ok, error) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                !ok ? reject(error) : resolve();
                return [2 /*return*/];
            });
        }); });
    });
}
exports.updateExisting = updateExisting;
function createNew(updater, doc, ins) {
    var _this = this;
    return new Promise(function (resolve, reject) {
        updater.put(new rdflib_1.NamedNode(doc), ins, "text/turtle", function (_uri, ok, error) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                !ok ? reject(error) : resolve();
                return [2 /*return*/];
            });
        }); });
    });
}
//# sourceMappingURL=create.js.map