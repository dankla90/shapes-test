"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Shape = void 0;
var rdflib_1 = require("rdflib");
var dataToRdf_1 = require("./transform/dataToRdf");
var create_1 = require("./handlers/create");
var findAll_1 = require("./handlers/findAll");
var findOne_1 = require("./handlers/findOne");
var update_1 = require("./handlers/update");
var delete_1 = require("./handlers/delete");
var shex = require("shex");
var Shape = /** @class */ (function () {
    function Shape(_a) {
        var id = _a.id, shape = _a.shape, context = _a.context, childContexts = _a.childContexts, type = _a.type;
        this.id = id;
        this.shape = shape;
        this.schema = shex.Parser.construct(this.id).parse(this.shape);
        this.prefixes = __assign({ rdf: "http://www.w3.org/1999/02/22-rdf-syntax-ns#" }, this.schema.prefixes);
        this.type = type && Object.values(type);
        this.context = context;
        this.childContexts = childContexts !== null && childContexts !== void 0 ? childContexts : [];
        this.store = new rdflib_1.IndexedFormula();
        this.fetcher = new rdflib_1.Fetcher(this.store);
        this.updater = new rdflib_1.UpdateManager(this.store);
    }
    Shape.prototype.dataToStatements = function (data, doc) {
        return dataToRdf_1.dataToStatements(this, data, doc);
    };
    Shape.prototype.findOne = function (args) {
        return findOne_1.findOne(this, args);
    };
    Shape.prototype.create = function (args) {
        return create_1.create(this, args);
    };
    Shape.prototype.update = function (args) {
        return update_1.update(this, args);
    };
    Shape.prototype.delete = function (args) {
        return delete_1.deleteShape(this, args);
    };
    Shape.prototype.findAll = function (args) {
        return findAll_1.findAll(this, args);
    };
    return Shape;
}());
exports.Shape = Shape;
//# sourceMappingURL=shape.js.map